Q36.Write an SQL query to report the distance travelled by each user.
Return the result table ordered by travelled_distance in descending order, if two or more users
travelled the same distance, order them by their name in ascending order.


create table Users
(id  int, 
name  varchar(20),
PRIMARY KEY(id));

insert into Users values
(1 ,'Alice'),
(2 ,'Bob'),
(3 ,'Alex'),
(4 ,'Donald'),
(7 ,'Lee'),
(13,'Jonathan'),
(19,'Elvis');
SELECT * from Users ;
create table Rides
(id   int, user_id  int, distance int,PRIMARY KEY(id));

insert into Rides values
(1,1 ,120),
(2,2 ,317),
(3,3 ,222),
(4,7 ,100),
(5,13,312),
(6,19,50 ),
(7,7 ,120),
(8,19,400),
(9,7 ,230);

SELECT * from Rides;

Select distinct u.name , CASE WHEN r.distance IS NOT NULL
then
sum(r.distance) over (partition by r.user_id) 
else 0
end as travelled_distance
from Users u
LEFT JOIN 
Rides r ON u.id=r.user_id 
ORDER BY travelled_distance DESC,name asc;


Q. 37. Write an SQL query to show the unique ID of each user, If a user does not have a unique ID replace just
show null.Return the result table in any order.


create  table Employees
(id int, name  varchar(20),PRIMARY KEY(id));

insert into Employees values
(1,'Alice'),
(7,'Bob'),
(11,'Meir'),
(90,'Winston'),
(3,'Jonathan');
select * from Employees;

create  table EmployeeUNI
(id int, unique_id int,PRIMARY KEY(id, unique_id));

insert into EmployeeUNI values
(3 ,1),
(11,2),
(90,3);

select * from EmployeeUNI;

SELECT eu.unique_id , e.name
from Employees e  
LEFT JOIN 
EmployeeUNI eu ON e.id=eu.id;


Q. 38 .Write an SQL query to find the id and the name of all students who are enrolled in departments that no
longer exist.Return the result table in any order.

create  table Departments
(id   int,name  varchar(30),PRIMARY KEY(id));

insert into Departments values
(1 ,'Electrical Engineering  '),
(7 ,'Computer Engineering    '),
(13,'Bussiness Administration');

SELECT * from Departments;

create  table Students
(id   int,name   varchar(30), department_id int,PRIMARY KEY(id));

insert into Students values
(23,'Alice',1 ),
(1 ,'Bob',7 ),
(5 ,'Jennifer',13),
(2 ,'John',14),
(4 ,'Jasmine',77),
(3 ,'Steve',74),
(6 ,'Luis',1 ),
(8 ,'Jonathan',7 ),
(7 ,'Daiana',33),
(11,'Madelynn',1 );

SELECT * from Students;

SELECT s.id,s.name 
from Students s
left JOIN 
Departments d ON s.department_id=d.id
WHERE s.department_id NOT IN (select id from Departments);

Q39. Write an SQL query to report the number of calls and the total call duration between each pair of
distinct persons (person1, person2) where person1 < person2.
Return the result table in any order.

create table Calls 
(from_id int,to_id int, duration int);

insert into Calls values
(1,2,59 ),
(2,1,11 ),
(1,3,20 ),
(3,4,100),
(3,4,200),
(3,4,200),
(4,3,499);

SELECT * from Calls;

With cte AS 
(SELECT CASE WHEN from_id < to_id then from_id else to_id end As person1,
       CASE WHEN from_id < to_id then to_id else from_id end As person2,duration
       FROM Calls);

       select * from cte;

WITH cte as (
    select from_id as person1, to_id as person2, duration
    from Calls
    UNION ALL
    select to_id as person1, from_id as person2, duration
    from Calls
)


select
    person1, person2, count(*) as call_count, sum(duration) as total_duration
from cte
where person1 < person2
group by person1, person2


Q40. Write an SQL query to find the average selling price for each product. average_price should be
rounded to 2 decimal places.Return the result table in any order.

create table Prices
(product_id int, 
start_date date, 
end_date date,
price  int,
PRIMARY KEY(product_id, start_date, end_date)
);

insert into Prices values
(1,'2019-02-17','2019-02-28',5),
(1,'2019-03-01','2019-03-22',20),
(2,'2019-02-01','2019-02-20',15),
(2,'2019-02-21','2019-03-31',30);

SELECT * from Prices;

create table UnitsSold
(product_id int,purchase_date date,units int);

insert into UnitsSold values
(1,'2019-02-25',100),
(1,'2019-03-01',15),
(2,'2019-02-10',200),
(2,'2019-03-22',30);

SELECT * from UnitsSold;

SELECT p.product_id, round(sum(p.price * u.units)/sum(u.units),2) as average_price
FROM Prices p 
JOIN UnitsSold u ON p.product_id=u.product_id and (u.purchase_date between p.start_date and p.end_date)
group by p.product_id;


Q41. Write an SQL query to report the number of cubic feet of volume the inventory occupies in each
warehouse.Return the result table in any order.

create table warehouse(
name varchar(20),
product_id int,
units int,
PRIMARY KEY(name, product_id)
);

create table products(
product_id int,
product_name varchar(20),
width int,
length int,
height int);

alter table products 
ADD PRIMARY KEY(product_id);


SELECT * from warehouse;
SELECT * from products;



insert into warehouse values
('LCHouse1',1,1),
('LCHouse1',2,10),
('LCHouse1',3,5),
('LCHouse2',1,2),
('LCHouse2',2,2),
('LCHouse3',4,1);


insert into products values
(1,'LC-TV',5,50,40),
(2,'LC-KeyChain',5,5,5),
(3,'LC-Phone',2,10,10),
(4,'LC-T-Shirt',4,10,20);


SELECT name,SUM(units*Width*LENGTH*Height) FROM warehouse w
INNER JOIN products p ON w.product_id = p.product_id GROUP BY name;














