Q36.Write an SQL query to report the distance travelled by each user.
Return the result table ordered by travelled_distance in descending order, if two or more users
travelled the same distance, order them by their name in ascending order.


create table Users
(id  int, 
name  varchar(20),
PRIMARY KEY(id));

insert into Users values
(1 ,'Alice'),
(2 ,'Bob'),
(3 ,'Alex'),
(4 ,'Donald'),
(7 ,'Lee'),
(13,'Jonathan'),
(19,'Elvis');
SELECT * from Users ;
create table Rides
(id   int, user_id  int, distance int,PRIMARY KEY(id));

insert into Rides values
(1,1 ,120),
(2,2 ,317),
(3,3 ,222),
(4,7 ,100),
(5,13,312),
(6,19,50 ),
(7,7 ,120),
(8,19,400),
(9,7 ,230);

SELECT * from Rides;

Select distinct u.name , CASE WHEN r.distance IS NOT NULL
then
sum(r.distance) over (partition by r.user_id) 
else 0
end as travelled_distance
from Users u
LEFT JOIN 
Rides r ON u.id=r.user_id 
ORDER BY travelled_distance DESC,name asc;


Q. 37. Write an SQL query to show the unique ID of each user, If a user does not have a unique ID replace just
show null.Return the result table in any order.


create  table Employees
(id int, name  varchar(20),PRIMARY KEY(id));

insert into Employees values
(1,'Alice'),
(7,'Bob'),
(11,'Meir'),
(90,'Winston'),
(3,'Jonathan');
select * from Employees;

create  table EmployeeUNI
(id int, unique_id int,PRIMARY KEY(id, unique_id));

insert into EmployeeUNI values
(3 ,1),
(11,2),
(90,3);

select * from EmployeeUNI;

SELECT eu.unique_id , e.name
from Employees e  
LEFT JOIN 
EmployeeUNI eu ON e.id=eu.id;


Q. 38 .Write an SQL query to find the id and the name of all students who are enrolled in departments that no
longer exist.Return the result table in any order.

create  table Departments
(id   int,name  varchar(30),PRIMARY KEY(id));

insert into Departments values
(1 ,'Electrical Engineering  '),
(7 ,'Computer Engineering    '),
(13,'Bussiness Administration');

SELECT * from Departments;

create  table Students
(id   int,name   varchar(30), department_id int,PRIMARY KEY(id));

insert into Students values
(23,'Alice',1 ),
(1 ,'Bob',7 ),
(5 ,'Jennifer',13),
(2 ,'John',14),
(4 ,'Jasmine',77),
(3 ,'Steve',74),
(6 ,'Luis',1 ),
(8 ,'Jonathan',7 ),
(7 ,'Daiana',33),
(11,'Madelynn',1 );

SELECT * from Students;

SELECT s.id,s.name 
from Students s
left JOIN 
Departments d ON s.department_id=d.id
WHERE s.department_id NOT IN (select id from Departments);








