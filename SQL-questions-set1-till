Q 26. Write an SQL query to get the names of products that have at least 100 units ordered in February 2020 and their amount.
Return result table in any order.

create table Products(
product_id int,
product_name varchar(50),
product_category varchar(20),
);

INSERT into Products values(1, 'Leetcode Solutions', 'Book'),
(2, 'Jewels of Stringology', 'Book'),
(3, 'HP', 'Laptop'),
(4, 'Lenovo', 'Laptop'),
(5, 'Leetcode Kit', 'T-shirt');

Alter table Products 
modify COLUMN product_name VARCHAR(50);

select * from Products;

Alter table Products 
ADD CONSTRAINT PRIMARY KEY (product_id); 

create table Orders (
product_id int,
order_date date,
unit int
);

Alter table Orders
ADD CONSTRAINT FOREIGN KEY(product_id) REFERENCES Products(product_id);

INSERT into Orders values
(1, '2020-02-05', 60),
(1, '2020-02-10', 70),
(2, '2020-01-18', 30),
(2, '2020-02-11', 80),
(3, '2020-02-17', 2),
(3, '2020-02-24', 3),
(4, '2020-03-01', 20),
(4, '2020-03-04', 30),
(4, '2020-03-04', 60),
(5, '2020-02-25', 50),
(5, '2020-02-27', 50),
(5, '2020-03-01', 50);

Query:

select * from Orders;
select a.product_name, sum(unit) as unit
from Products a
left join Orders b
on a.product_id = b.product_id
where b.order_date between '2020-02-01' and '2020-02-29'
group by a.product_id
having sum(unit) >= 100;

Q27. Write an SQL query to find the users who have valid emails.

A valid e-mail has a prefix name and a domain where:
● The prefix name is a string that may contain letters (upper or lower case), digits, underscore
'_', period '.', and/or dash '-'. The prefix name must start with a letter.
● The domain is '@leetcode.com'.
Return the result table in any order.
The query result format is in the following example.

Query :

create table Users(
user_id int,
name varchar(30),
mail varchar(30)
);

alter table Users
ADD PRIMARY KEY (user_id);
SELECT * from Users;

insert into Users values (1, 'Winston', 'winston@leetcode.com');
insert into Users values (2, 'Jonathan', 'jonathanisgreat');
insert into Users values (3, 'Annabelle', 'bella-@leetcode.com');
insert into Users values (4, 'Sally', 'sally.come@leetcode.com');
insert into Users values (5, 'Marwan', 'quarz#2020@leetcode.com');
insert into Users values (6, 'David', 'david69@gmail.com');
insert into Users values (7, 'Shapiro','.shapo@leetcode.com');


SELECT *
FROM Users
WHERE REGEXP_LIKE(mail, '^[a-zA-Z][a-zA-Z0-9\_\.\-]*@leetcode.com');


Q 28. Write an SQL query to report the customer_id and customer_name of customers who have spent at
least $100 in each month of June and July 2020.
Return the result table in any order.

create table Customers(
customer_id int,
name varchar(20),
country varchar(20)
);

alter table Customers
add PRIMARY key(customer_id);

INSERT into Customers values (1, 'Winston', 'USA'),
(2, 'Jonathan' ,'Peru'),
(3, 'Moustafa', 'Egypt');

select * from Customers;

CREATE table Product(
    product_id int,
    description VARCHAR(20),
    price int,
    PRIMARY key(product_id)
);

insert into Product values (10, 'LC Phone', 300),
(20, 'LC T-Shirt', 10),
(30, 'LC Book', 45),
(40, 'LC Keychain', 2);

select * from Product;


create table Orders(
order_id int,
customer_id int,
product_id int,
order_date date,
quantity int,
PRIMARY KEY(order_id)
);

insert into Orders values(1, 1, 10, '2020-06-10', 1),
(2, 1, 20, '2020-07-01', 1),
(3, 1, 30, '2020-07-08', 2),
(4, 2, 10, '2020-06-15', 2),
(5, 2, 40, '2020-07-01', 10),
(6, 3, 20, '2020-06-24', 2),
(7, 3, 30, '2020-06-25', 2),
(9, 3, 30, '2020-05-08', 3);

SELECT * from Orders;

SELECT customer_id, name FROM Customers
WHERE customer_id IN (
SELECT a.customer_id FROM Orders AS a
JOIN Product AS b
ON a.product_id = b.product_id
WHERE a.order_date BETWEEN '2020-06-01' AND '2020-06-30'
GROUP BY a.customer_id
HAVING SUM(a.quantity * b.price) >= 100
)
AND customer_id IN (
SELECT a.customer_id FROM Orders AS a
JOIN Product AS b
ON a.product_id = b.product_id
WHERE a.order_date BETWEEN '2020-07-01' AND '2020-07-31'
GROUP BY a.customer_id
HAVING SUM(a.quantity * b.price) >= 100
);

Q 29. Write an SQL query to report the distinct titles of the kid-friendly movies streamed in June 2020.
Return the result table in any order.

create table TVProgram(
program_date date,
content_id int,
channel varchar(30)
);

insert into TVProgram values('2020-06-10 08:00', 1, 'LC-Channel'),
('2020-05-11 12:00', 2, 'LC-Channel'),
('2020-05-12 12:00', 3, 'LC-Channel'),
('2020-05-13 14:00', 4, 'Disney Ch'),
('2020-06-18 14:00', 4, 'Disney Ch'),
('2020-07-15 16:00', 5, 'Disney Ch');

alter table TVProgram
add PRIMARY KEY(program_date, content_id);

select * from TVProgram;

create table Content(
content_id varchar(30),
title varchar(30),
Kids_content VARCHAR(5),
content_type varchar(30)
);


insert into Content values
('1', 'Leetcode Movie', 'N', 'Movies'),
('2', 'Alg. for Kids', 'Y', 'Series'),
('3', 'Database Sols', 'N', 'Series'),
('4', 'Aladdin', 'Y', 'Movies'),
('5', 'Cinderella', 'Y', 'Movies');

select * from Content;

select title from Content a 
JOIN
TVProgram b on a.content_id=b.content_id
            where Kids_content='Y' and content_type='Movies' and program_date BETWEEN '2020-06-1' and '2020-06-30';

Q. 30 Write an SQL query to find the npv of each query of the Queries table.
    Return the result table in any order.

create table NPV(
id int,
year int,
npv int,
PRIMARY KEY(id,year)
);

INSERT into NPV values(1, 2018, 100),
(7, 2020, 30),
(13, 2019, 40),
(1, 2019, 113),
(2, 2008, 121),
(3, 2009, 12),
(11, 2020, 99),
(7, 2019, 0);

SELECT * from NPV;

create Table Queries(
id int,
year int,
PRIMARY KEY(id,year)
);

INSERT into Queries values(1, 2019),
(2, 2008),
(3, 2009),
(7, 2018),
(7, 2019),
(7, 2020),
(13, 2019);

SELECT * from Queries;

SELECT q.id,q.year,CASE WHEN NPV.npv is NOT NULL
THEN NPV.npv
ELSE
0 END
FROM Queries q
LEFT JOIN NPV ON q.id=NPV.id 
AND q.year=NPV.year;












