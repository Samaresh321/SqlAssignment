Q61. Write an SQL query to report the shortest distance between any two points from the Point table. 

create table point(x int);

insert into point values (-1),(0),(2);

SELECT * from point;

SELECT MIN(ABS(p1.x-p2.x)) as Shortest_Path
FROM point p1
CROSS JOIN point p2
WHERE p1.x <> p2.x ;

Q62.Write a SQL query for a report that provides the pairs (actor_id, director_id) where the actor has cooperated with the director at least three times.
    Return the result table in any order.

create table ActorDirector(actor_id int,director_id int,timestamp int);

insert into ActorDirector values
(1,1,0),
(1,1,1),
(1,1,2),
(1,2,3),
(1,2,4),
(2,1,5),
(2,1,6);

SELECT * from ActorDirector;


select actor_id,director_id 
from (
    select actor_id,director_id,count(*) cooperated ,
    dense_rank() over(order by count(*) desc) rnk FROM
    ActorDirector group by actor_id,director_id)a 
    where a.rnk = 1;

WITH cte AS(select actor_id,director_id,
ROW_NUMBER() over(PARTITION BY actor_id) rnk 
FROM ActorDirector)

SELECT actor_id,director_id 
FROM cte WHERE rnk=3
 ;

SELECT actor_id,director_id
FROM 
ActorDirector
GROUP BY actor_id,director_id
HAVING COUNT(timestamp)>=3;

Q63. Write an SQL query that reports the product_name, year, and price for each sale_id in the Sales table. 
     Return the resulting table in any order.
create  table Sales
(sale_id int, product_id int, year int, quantity int,price int);

insert into Sales values
(1,100,2008,10,5000),
(2,100,2009,12,5000),
(7,200,2011,15,9000);

create table Product
(product_id int,product_name varchar(10));

insert into Product values
(100,'Nokia  '),
(200,'Apple  '),
(300,'Samsung');

SELECT product_name, year, price
FROM Sales s 
INNER JOIN 
Product p ON s.product_id=p.product_id;

Q64.Write an SQL query that reports the average experience years of all the employees for each project, rounded to 2 digits.
     Return the result table in any order.


create table Project
(project_id  int, employee_id int);

insert into Project values
(1,1),
(1,2),
(1,3),
(2,1),
(2,4);

create table Employee
(employee_id int, name   varchar(20), experience_years int);

insert into Employee values
(1,'Khaled',3),
(2,'Ali',2),
(3,'John',1),
(4,'Doe',2);

select project_id , round(avg(experience_years),1) as average_years
from Project  p
left join Employee  e
on p.employee_id = e.employee_id
group by project_id

Q65.Write an SQL query that reports the best seller by total sales price, If there is a tie, report them all.
    Return the result table in any order.
 
 create table Product 
(product_id int, product_name varchar(20),unit_price int);

insert into Product
values
(1,'S8',1000),
(2,'G4',800),
(3,'iPhone',1400);

create table Sales( seller_id int,product_id int,buyer_id int, 
sale_date date, quantity int, price int);

insert into Sales
values
(1,1,1,'2019-01-21',2,2000),
(1,2,2,'2019-02-17',1,800 ),
(2,2,3,'2019-06-02',1,800 ),
(3,3,4,'2019-05-13',2,2800);

SELECT * FROM Sales;



With grouped_table AS(SELECT seller_id,sum(price) as total_sales 
FROM Sales 
GROUP BY seller_id),
rank_table as(
    SELECT seller_id , RANK() over(order by total_sales desc) rank_col
    from grouped_table
)
SELECT seller_id from rank_table where rank_col =1;

 Q66.Write an SQL query that reports the buyers who have bought S8 but not iPhone. Note that S8 and iPhone are products present in the Product table.
     Return the result table in any order.

create table Product 
(product_id int, product_name varchar(20),unit_price int);

insert into Product
values
(1,'S8',1000),
(2,'G4',800),
(3,'iPhone',1400);

create table Sales( seller_id int,product_id int,buyer_id int, 
sale_date date, quantity int, price int);

insert into Sales
values
(1,1,1,'2019-01-21',2,2000),
(1,2,2,'2019-02-17',1,800 ),
(2,2,3,'2019-06-02',1,800 ),
(3,3,4,'2019-05-13',2,2800);

select s.buyer_id from Sales s
join Product p on 
p.product_id = s.product_id and 
product_name='S8'

Q67. Write an SQL query to compute the moving average of how much the customer paid in a seven days
     window (i.e., current day + 6 days before). average_amount should be rounded to two decimal places.
     Return result table ordered by visited_on in ascending order.

create table Customer
(customer_id int, name varchar(20),visited_on date,amount int);

insert into Customer  values
(1,'Jhon','2019-01-01',100),
(2,'Daniel','2019-01-02',110),
(3,'Jade','2019-01-03',120),
(4,'Khaled','2019-01-04',130),
(5,'Winston','2019-01-05',110),
(6,'Elvis','2019-01-06',140),
(7,'Anna','2019-01-07',150),
(8,'Maria','2019-01-08',80),
(9,'Jaze','2019-01-09',110),
(1,'Jhon','2019-01-10',130),
(3,'Jade','2019-01-10',150);

Select * from Customer;


WITH cte AS (Select visited_on, SUM(amount) As total_amount
From Customer
GROUP BY visited_on),

cte2 AS(SELECT visited_on ,
SUM(total_amount) over(ORDER BY visited_on ROWS BETWEEN 6 PRECEDING and current row) as price,
ROUND(AVG(total_amount) over(ORDER BY visited_on ROWS BETWEEN 6 PRECEDING and current row),2) as average_amount
FROM cte)

SELECT *
FROM cte2
WHERE visited_on >= (SELECT visited_on from cte2 order by visited_on limit 1) + 6
ORDER BY visited_on ;

Q68. Write an SQL query to find the total score for each gender on each day.
     Return the result table ordered by gender and day in ascending order.







