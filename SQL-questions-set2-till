Q51. Write an SQL query to report the name, population, and area of the big countries.Return the result table in any order.
A country is big if:
● it has an area of at least three million (i.e., 3000000 km2), or
● it has a population of at least twenty-five million (i.e., 25000000).


create table World

(name varchar(20),  continent varchar(20),area bigint,    population bigint,gdp  bigint);

insert into World values
('Afghanistan','Asia',652230,25500100,20343000 ),
('Albania','Europe',28748,2831741,12960000),
('Algeria','Africa',2381741,37100000,188681000),
('Andorra','Europe',468,78115,3712000),
('Angola','Africa',1246700,20609294,100990000);

SELECT * from World;


SELECT name,population,area 
from World 
where population >=25000000 or area >=3000000 ;

Q52. Write an SQL query to report the names of the customer that are not referred by the customer with id = 2.Return the result table in any order.

create table customer
(id   int,name varchar(20),referee_id int);

insert into customer values
(1,'Will',NULL),
(2,'Jane',NULL),
(3,'Alex',   2),
(4,'Bill',NULL),
(5,'Zack',   1),
(6,'Mark',   2);

SELECT * from customer;

SELECT name from customer where referee_id != 2 or referee_id is NULL;


Q53. Write an SQL query to report all customers who never order anything.Return the result table in any order.

create table Customers
(id int,name varchar(20),PRIMARY KEY(id));

insert into Customers values
(1,'Joe'),
(2,'Henry'),
(3,'Sam'),
(4,'Max');

create table Orders
(id int,
customerId int,
PRIMARY KEY(id),
FOREIGN KEY(customerId) REFERENCES Customers(id)
);

insert into Orders values
(1,3),
(2,1);

SELECT c.name FROM Customers c 
LEFT JOIN Orders o ON c.id=o.customerId
WHERE o.customerId is NULL;

select
name as Customers
from Customers
where Id not in( select CustomerId from Orders );

Q54. Write an SQL query to find the team size of each of the employees.Return result table in any order.

create table Employee(employee_id int,team_id int,PRIMARY KEY(employee_id));
insert into Employee values
(1,8),
(2,8),
(3,8),
(4,7),
(5,9),
(6,9);


SELECT * from Employee;

SELECT employee_id , COUNT(team_id) over (partition by team_id ) as team_size 
FROM Employee
ORDER BY employee_id;

Q 55.A telecommunications company wants to invest in new countries. 
The company intends to invest in the countries where the average call duration of the calls in this country is strictly greater than the global average call duration.
Write an SQL query to ﬁnd the countries where this company can invest. Return the result table in any order.

create table Person(
id int,name varchar(20),phone_number varchar(20));

insert into Person values
(3 ,'Jonathan','051-1234567'),
(12,' Elvis','051-7654321'),
(1 ,'Moncef','212-1234567'),
(2 ,'Maroua','212-6523651'),
(7 ,'Meir','972-1234567'),
(9 ,'Rachel','972-0011100');

create table Country(
name varchar(20),country_code int);

insert into Country values
('Peru', 51),
('Israel', 972),
('Morocco', 212),
('Germany', 49),
('Ethiopia', 251);

create table Calls
(caller_id int,
callee_id int,duration int);

insert into Calls values
(1,9,33),
(2,9,4),
(1,2,59),
(3,12,102),
(3,12,330),
(12,3,5),
(7,9,13),
(7,1,3),
(9,7,1),
(1,7,7);


SELECT c.name FROM
Person p 
LEFT JOIN Country c
ON LEFT (p.phone_number,3)=c.country_code
LEFT JOIN Calls ca 
ON p.id IN (ca.caller_id,ca.callee_id)
GROUP BY c.name
HAVING AVG(ca.duration)>(SELECT AVG(duration) FROM Calls );

Q 56.Write an SQL query to report the device that is ﬁrst logged in for each player. Return the result table in any order.

create  table Activity
(player_id int, device_id int, event_date date, games_played int);

insert into Activity values
(1,2,'2016-03-01',5),
(1,2,'2016-05-02',6),
(2,3,'2017-06-25',1),
(3,1,'2016-03-02',0),
(3,4,'2018-07-03',5);


select player_id,device_id  
from(
select player_id,device_id,event_date,
row_number() over(partition by player_id order by event_date asc) as rw 
from Activity) a
where a.rw = 1;

57. -Write an SQL query to ﬁnd the customer_number for the customer who has placed the largest number of orders.

create table Orders(
order_number int, customer_number int);

insert into Orders values
(1,1),
(2,2),
(3,3),
(4,3);

SELECT * from Orders ;

WIth cte AS(SELECT customer_number, COUNT(*)
from Orders 
GROUP BY customer_number
ORDER BY COUNT(*) DESC LIMIT 1)

SELECT customer_number From cte ;

SELECT a.customer_number 
FROM (select customer_number, COUNT(*)
from Orders 
GROUP BY customer_number
ORDER BY COUNT(*) DESC LIMIT 1) a;






































