Q51. Write an SQL query to report the name, population, and area of the big countries.Return the result table in any order.
A country is big if:
● it has an area of at least three million (i.e., 3000000 km2), or
● it has a population of at least twenty-five million (i.e., 25000000).


create table World

(name varchar(20),  continent varchar(20),area bigint,    population bigint,gdp  bigint);

insert into World values
('Afghanistan','Asia',652230,25500100,20343000 ),
('Albania','Europe',28748,2831741,12960000),
('Algeria','Africa',2381741,37100000,188681000),
('Andorra','Europe',468,78115,3712000),
('Angola','Africa',1246700,20609294,100990000);

SELECT * from World;


SELECT name,population,area 
from World 
where population >=25000000 or area >=3000000 ;

Q52. Write an SQL query to report the names of the customer that are not referred by the customer with id = 2.Return the result table in any order.

create table customer
(id   int,name varchar(20),referee_id int);

insert into customer values
(1,'Will',NULL),
(2,'Jane',NULL),
(3,'Alex',   2),
(4,'Bill',NULL),
(5,'Zack',   1),
(6,'Mark',   2);

SELECT * from customer;

SELECT name from customer where referee_id != 2 or referee_id is NULL;


Q53. Write an SQL query to report all customers who never order anything.Return the result table in any order.

create table Customers
(id int,name varchar(20),PRIMARY KEY(id));

insert into Customers values
(1,'Joe'),
(2,'Henry'),
(3,'Sam'),
(4,'Max');

create table Orders
(id int,
customerId int,
PRIMARY KEY(id),
FOREIGN KEY(customerId) REFERENCES Customers(id)
);

insert into Orders values
(1,3),
(2,1);

SELECT c.name FROM Customers c 
LEFT JOIN Orders o ON c.id=o.customerId
WHERE o.customerId is NULL;

select
name as Customers
from Customers
where Id not in( select CustomerId from Orders );

Q54. Write an SQL query to find the team size of each of the employees.Return result table in any order.

create table Employee(employee_id int,team_id int,PRIMARY KEY(employee_id));
insert into Employee values
(1,8),
(2,8),
(3,8),
(4,7),
(5,9),
(6,9);


SELECT * from Employee;

SELECT employee_id , COUNT(team_id) over (partition by team_id ) as team_size 
FROM Employee
ORDER BY employee_id;





