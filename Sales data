Q17.Write an SQL query that reports the products that were only sold in the first quarter of 2019. That is,
between 2019-01-01 and 2019-03-31 inclusive.

create table Product(
    product_id int,
    product_name varchar(20),
    unit_price int,
    primary key(product_id)
);
insert into Product values(1, 'S8', 1000),(2, 'G4' ,800),(3, 'iPhone', 1400);

select * from Product;

create table Sales(
seller_id int,
product_id int,
buyer_id int,
sale_date date,
quantity int,
price int,
Foreign key(product_id) REFERENCES Product(product_id)
);

insert into Sales values(1, 1, 1, '2019-01-21', 2, 2000);
insert into Sales values(1, 2, 2, '2019-02-17', 1, 800);
insert into Sales values(2, 2, 3, '2019-06-02' ,1 ,800);
insert into Sales values(3, 3, 4, '2019-05-13', 2, 2800);

select * from Sales;

Query :

SELECT product_id, 
       product_name 
FROM   Product 
WHERE  product_id NOT IN (SELECT product_id 
                          FROM   Sales 
                          WHERE  sale_date NOT BETWEEN 
                                 '2019-01-01' AND '2019-03-31'); 
                                 
                                 
Q 18 ##Write an SQL query to find all the authors that viewed at least one of their own articles.
##Return the result table sorted by id in ascending order.

create table Views (
    article_id int,
    author_id int,
    viewer_id int,
    view_date date

);

insert into Views values(1, 3, 5, '2019-08-01'),
(1, 3, 6, '2019-08-02'),
(2, 7, 7, '2019-08-01'),
(2, 7, 6, '2019-08-02'),
(4, 7, 1, '2019-07-22'),
(3, 4, 4, '2019-07-21'),
(3, 4, 4, '2019-07-21');

Select * from Views;

SELECT DISTINCT author_id FROM Views WHERE author_id = viewer_id order by author_id asc;


Q19. ## Write an SQL query to find the percentage of immediate orders in the table, rounded to 2 decimal places.

create table Delivery (
delivery_id int,
customer_id int,
order_date date,
customer_pref_delivery_date date,
Primary key(delivery_id)

);

insert into Delivery values (1, 1, '2019-08-01', '2019-08-02'),
(2, 5, '2019-08-02', '2019-08-02'),
(3, 1, '2019-08-11', '2019-08-11'),
(4, 3, '2019-08-24', '2019-08-26'),
(5, 4, '2019-08-21', '2019-08-22'),
(6, 2, '2019-08-11' ,'2019-08-13');

select * from Delivery;

Q 20.

Q21.  Write an SQL query to find the team size of each of the employees.
Return result table in any order.

Query :

create table Employee(
employee_id int,
 team_id int,
 Primary key(employee_id)
);

insert into  Employee values(1, 8),
(2, 8),
(3, 8),
(4, 7),
(5 ,9),
(6 ,9);

select * from Employee;

SELECT employee_id, COUNT(team_id) OVER (PARTITION BY team_id) as team_size
FROM Employee;

Q22 .## Write an SQL query to find the type of weather in each country for November 2019.
The type of weather is:
● Cold if the average weather_state is less than or equal 15,
● Hot if the average weather_state is greater than or equal to 25, and
● Warm otherwise.
Return result table in any order 

create table Countries(

country_id int,
country_name varchar(50),
Primary key(country_id)
);

insert into Countries values(2 ,'USA'),
(3 ,'Australia'),
(7, 'Peru'),
(5, 'China'),
(8, 'Morocco'),
(9, 'Spain');

select * from Countries;

create table Weather(

    country_id int,
    weather_state int,
    day date,
    Primary key(country_id,day)
);
select * from Weather;


Insert into Weather values(2, 15, '2019-11-01'),
(2, 12, '2019-10-28'),
(2, 12, '2019-10-27'),
(3, -2, '2019-11-10'),   
(3, 0, '2019-11-11'),
(3, 3, '2019-11-12'),
(5, 16, '2019-11-07'),
(5, 18, '2019-11-09'),
(5, 21, '2019-11-23'),
(7, 25, '2019-11-28'),
(7, 22, '2019-12-01'),
(7, 20, '2019-12-02'),
(8, 25, '2019-11-05'),
(8, 27, '2019-11-15'),
(8, 31, '2019-11-25'),
(9, 7, '2019-10-23'),
(9, 3, '2019-12-23');

QUERY : 

SELECT c.country_name,
       CASE
           WHEN AVG(w.weather_state * 1.0) <= 15.0 THEN 'Cold'
           WHEN AVG(w.weather_state * 1.0) >= 25.0 THEN 'Hot'
           ELSE 'Warm'
       END AS weather_type
FROM Countries AS c
INNER JOIN Weather AS w ON c.country_id = w.country_id
WHERE w.day BETWEEN '2019-11-01' AND '2019-11-30'
GROUP BY c.country_id;


                                 
                                 
                                 
                                 
                                 
                                
