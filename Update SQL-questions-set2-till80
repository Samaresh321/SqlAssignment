Q71. Write an SQL query to find employee_id of all employees that directly or indirectly report their work to the head of the company.
     The indirect relation between managers will not exceed three managers as the company is small.
     Return the result table in any order.
 
create table Employees 
(employee_id int,
employee_name varchar(20),
manager_id int);

insert into Employees values
(1,'Boss',1),
(3,'Alice', 3),
(2,'Bob', 1),
(4,'Daniel', 2),
(7,'Luis', 4),
(8,'Jhon', 3),
(9,'Angela', 8),
(77,'Robert', 1);


Select employee_id,manager_id FROM Employees WHERE manager_id in(select employee_id
FROM Employees
WHERE manager_id in (SELECT employee_id FROM Employees WHERE manager_id=1))
and employee_id != manager_id;
  
  
 Q72. Write an SQL query to find for each month and country, the number of transactions and their total amount, 
      the number of approved transactions and their total amount.
      Return the result table in any order.


create table Transactions(
id int,country varchar(10),state varchar(10),amount int,trans_date date);

insert into Transactions values
(121,'US','approved',1000,'2018-12-18'),
(122,'US','declined',2000,'2018-12-19'),
(123,'US','approved',2000,'2019-01-01'),
(124,'DE','approved',2000,'2019-01-07');

SELECT * FROM Transactions;

select left(trans_date,7),country,
count(*) trans_count,
sum(if(state = 'approved',1,0))  approved_count,
sum(amount) trans_total_amount ,
sum(if(state = 'approved',amount,0)) approved_total_amount
from Transactions
group by left(trans_date,7),country;


SELECT DISTINCT LEFT(trans_date,7) as month,country,COUNT(*) over(PARTITION BY LEFT(trans_date,7),country) as trans_count ,
sum(if(state = 'approved',1,0)) over(PARTITION BY LEFT(trans_date,7),country) as approved_count,
sum(amount) over(PARTITION BY LEFT(trans_date,7),country) as trans_total_amount ,
sum(if(state = 'approved',amount,0)) over(PARTITION BY LEFT(trans_date,7),country) as approved_total_amount
From Transactions;

Q73. Write an SQL query to find the average daily percentage of posts that got removed after being reported as spam, rounded to 2 decimal places.

create table Actions(
user_id int,post_id int,action_date date,action varchar(10),extra varchar(10));

insert into Actions values
(1,1,'2019-07-01','view','null'),
(1,1,'2019-07-01','like','null'),
(1,1,'2019-07-01','share','null'),
(2,2,'2019-07-04','view','null'),
(2,2,'2019-07-04','report','spam'),
(3,4,'2019-07-04','view','null'),
(3,4,'2019-07-04','report','spam'),
(4,3,'2019-07-02','view','null'),
(4,3,'2019-07-02','report','spam'),
(5,2,'2019-07-03','view','null'),
(5,2,'2019-07-03','report','racism'),
(5,5,'2019-07-03','view','null'),
(5,5,'2019-07-03','report','racism');

create table Removals(
post_id int,remove_date date);

insert into Removals values
(2,'2019-07-20'),
(3,'2019-07-18');

select Round(AVG(rmv_avg),2) as average_daily_percent from
(
select avg (post_id in (SELECT post_id FROM Removals) )*100 rmv_avg
FROM (SELECT distinct post_id, action_date, extra
FROM  Actions) act 
WHERE extra='spam'
GROUP BY action_date) avg_vals ;



WITH cte AS (select action_date , avg(post_id in (SELECT post_id FROM Removals))*100 rmv_avg
FROM Actions 
WHERE extra='spam'
GROUP BY action_date)

SELECT Round(AVG(rmv_avg),2) From cte;


Q74 .Write an SQL query to report the fraction of players that logged in again on the day after the day they
 first logged in, rounded to 2 decimal places. In other words, you need to count the number of players
 that logged in for at least two consecutive days starting from their first login date, then divide that
 number by the total number of players.


create Table Activity
(player_id     int ,
device_id     int ,
event_date    date,
games_played  int);

insert into Activity values
(1,2,'2016-03-01',5), 
(1,2,'2016-03-02',6), 
(2,3,'2017-06-25',1), 
(3,1,'2016-03-02',0), 
(3,4,'2018-07-03',5); 

SELECT * from Activity;


with cte as
(select a1.player_id as player_id
from Activity a1
join Activity a2
on datediff(a1.event_date,a2.event_date) = 1
and a1.player_id = a2.player_id),
cte2 as (select count(distinct player_id) number_games from Activity)
select round(count(distinct player_id)/(select number_games from cte2),2)
fraction from cte;



    
    
    
    
